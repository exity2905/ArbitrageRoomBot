import asyncio
import os
import json
from pathlib import Path
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv


# =======================
#  –ù–ê–°–¢–†–û–ô–ö–ò
# =======================
# üëâ –í–°–¢–ê–í–¨ –°–í–û–ô –¢–û–ö–ï–ù
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ–º—É —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
SEEN_FILE = Path("seen_users.json")


# =======================
#  –£–¢–ò–õ–ò–¢–´
# =======================
def load_seen_users() -> set[int]:
    if SEEN_FILE.exists():
        try:
            data = json.loads(SEEN_FILE.read_text(encoding="utf-8"))
            return set(map(int, data))
        except Exception:
            return set()
    return set()

def save_seen_users(users: set[int]) -> None:
    try:
        SEEN_FILE.write_text(json.dumps(list(users)), encoding="utf-8")
    except Exception:
        pass

def to_float(text: str) -> float:
    return float(text.strip().replace(" ", "").replace(",", "."))

def fmt(x: float, digits: int = 4) -> str:
    s = f"{x:.{digits}f}"
    return s.rstrip("0").rstrip(".") if "." in s else s


# =======================
#  –ö–û–ù–°–¢–ê–ù–¢–´
# =======================
WELCOME_MSG = (
   "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±–æ—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ <b>Arbitrage Room | by M&N</b>.\n\n"
    "‚öôÔ∏è –≠—Ç–æ—Ç –±–æ—Ç ‚Äî –±—ã—Å—Ç—Ä—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏. –û–Ω –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ —Å–æ–∑–¥–∞–Ω "
    "–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞—à–µ–≥–æ –∫–æ–º—å—é–Ω–∏—Ç–∏.\n\n"
    "üîí –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –∏ –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è "
    "—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω–µ Arbitrage Room. –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø, –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å "
    "–∏–ª–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.\n\n"
    "üë§ –ê–≤—Ç–æ—Ä –±–æ—Ç–∞: <b>@voskry</b>.\n"
    "üí¨ –ï—Å–ª–∏ –µ—Å—Ç—å –∏–¥–µ–∏, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –±–æ—Ç–∞ –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å ‚Äî –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å "
    "–≤ —á–∞—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –ª–∏—á–Ω–æ. –õ—é–±–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è üôå"
)


# =======================
#  FSM
# =======================
class CalcStates(StatesGroup):
    waiting_for_eur = State()
    waiting_for_course = State()
    waiting_for_telegram_course = State()


# =======================
#  –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# =======================
dp = Dispatcher(storage=MemoryStorage())
bot = Bot(token=BOT_TOKEN)
SEEN_USERS: set[int] = load_seen_users()


# =======================
#  –•–ï–ù–î–õ–ï–†–´
# =======================
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    uid = message.from_user.id
    if uid not in SEEN_USERS:
        SEEN_USERS.add(uid)
        save_seen_users(SEEN_USERS)
        await message.answer(WELCOME_MSG, parse_mode=ParseMode.HTML)

    kb = InlineKeyboardBuilder()
    kb.button(text="üìä –ü–æ—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–±—ã–ª—å", callback_data="calc_profit")
    kb.adjust(1)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥—É —Å—É–º–º—É, –∫—É—Ä—Å –∏ –ø–æ–∫–∞–∂—É –ø—Ä–∏–±—ã–ª—å.\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üëá",
        reply_markup=kb.as_markup()
    )

@dp.message(Command("chatid"))
async def get_chat_id(message: types.Message):
    await message.answer(f"üÜî Chat ID: <code>{message.chat.id}</code>", parse_mode=ParseMode.HTML)

@dp.callback_query(F.data == "calc_profit")
async def ask_eur(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üí∂ –í–≤–µ–¥–∏ —Å—É–º–º—É –≤ EUR:")
    await state.set_state(CalcStates.waiting_for_eur)

@dp.message(CalcStates.waiting_for_eur)
async def eur_input(message: types.Message, state: FSMContext):
    try:
        eur = to_float(message.text)
        if eur <= 0:
            raise ValueError
        await state.update_data(eur=eur)
        await message.answer("üí± –í–≤–µ–¥–∏ –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏:")
        await state.set_state(CalcStates.waiting_for_course)
    except:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 1050.5")

@dp.message(CalcStates.waiting_for_course)
async def course_input(message: types.Message, state: FSMContext):
    try:
        course = to_float(message.text)
        if course <= 0:
            raise ValueError
        await state.update_data(course=course)
        await message.answer("üìâ –í–≤–µ–¥–∏ –∫—É—Ä—Å –ø–æ–∫—É–ø–∫–∏:")
        await state.set_state(CalcStates.waiting_for_telegram_course)
    except:
        await message.answer("‚ö†Ô∏è –ù—É–∂–µ–Ω –∫—É—Ä—Å –≤ –≤–∏–¥–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞!")

@dp.message(CalcStates.waiting_for_telegram_course)
async def tg_course_input(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        eur = data["eur"]
        course = data["course"]
        tg_course = to_float(message.text)
        if tg_course <= 0:
            raise ValueError

        usdt_sold = round(eur / course, 2)  # USDT –ø—Ä–æ–¥–∞–Ω–æ
        profit_usdt = round((eur - usdt_sold * tg_course) / tg_course, 4)

        await message.answer(
            (
                f"‚úÖ –û—Ä–¥–µ—Ä: <b>{fmt(eur)} EUR</b>\n"
                f"üè∑Ô∏è –ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏: <b>{fmt(course)}</b>\n"
                f"üìâ –ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏: <b>{fmt(tg_course)}</b>\n\n"
                f"üîÅ –ü—Ä–æ–¥–∞–Ω–æ USDT: <b>{fmt(usdt_sold, 2)} USDT</b>\n"
                f"üí∞ –ü—Ä–∏–±—ã–ª—å: <b>{fmt(profit_usdt)} USDT</b>"
            ),
            parse_mode=ParseMode.HTML
        )
        await state.clear()

    except:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å —á–∏—Å–ª–æ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

# =======================
#  MAIN
# =======================
async def main():
    if not BOT_TOKEN or BOT_TOKEN == "–í–ê–®_–¢–û–ö–ï–ù_–°–Æ–î–ê":
        print("‚ùó –£—Å—Ç–∞–Ω–æ–≤–∏ TELEGRAM_BOT_TOKEN –∏–ª–∏ –≤–ø–∏—à–∏ —Ç–æ–∫–µ–Ω –≤ BOT_TOKEN.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
